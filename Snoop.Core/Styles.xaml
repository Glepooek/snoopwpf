<!--
    (c) Copyright Cory Plotts.
    This source is subject to the Microsoft Public License (Ms-PL).
    Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
    All other rights reserved.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Snoop.Controls"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    mc:Ignorable="options d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="BaseStyles.xaml" />
        <ResourceDictionary Source="Controls/ProperTreeViewResources.xaml" />
        <ResourceDictionary Source="Controls/ValueEditors/EditorTemplates.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Snoop.Styles.ProperTreeView"
           BasedOn="{StaticResource Snoop.Styles.TreeView}"
           TargetType="TreeView" />

    <Style x:Key="{x:Type TreeView}"
           BasedOn="{StaticResource Snoop.Styles.TreeView}"
           TargetType="TreeView" />

    <!-- <Style x:Key="{x:Type StackPanel}" -->
    <!-- TargetType="{x:Type StackPanel}"> -->
    <!-- <Setter Property="Background" -->
    <!-- Value="Transparent" /> -->
    <!-- <Setter Property="Margin" -->
    <!-- Value="0" /> -->
    <!-- <Setter Property="OverridesDefaultStyle" -->
    <!-- Value="True" /> -->
    <!-- </Style> -->

    <!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
    <Style x:Key="SimpleRepeatButton"
           d:IsControlPart="True"
           BasedOn="{x:Null}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="SimpleThumbStyle"
           d:IsControlPart="True"
           BasedOn="{x:Null}"
           TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid"
                          Margin="0 0 0 0">
                        <Rectangle x:Name="Rectangle"
                                   Width="Auto"
                                   Height="Auto"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Fill="{DynamicResource NormalBrush}"
                                   RadiusX="2"
                                   RadiusY="2"
                                   Stroke="{DynamicResource NormalBorderBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsDragging" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="SimpleScrollRepeatButtonStyle"
           d:IsControlPart="True"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

    <Style x:Key="SimpleScrollBar"
           BasedOn="{StaticResource {x:Type ScrollBar}}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="Foreground" Value="{DynamicResource Snoop.Brushes.Default.Foreground}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                          Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <RepeatButton Style="{DynamicResource SimpleRepeatButton}"
                                      x:Name="DecreaseRepeat"
                                      Command="ScrollBar.LineUpCommand">
                            <Grid>
                                <Path x:Name="DecreaseArrow"
                                      Data="M 0 4 L 8 4 L 4 0 Z"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track x:Name="PART_Track"
                               Grid.Row="1"
                               IsDirectionReversed="true"
                               Orientation="Vertical">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                                              x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                                              x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Style="{DynamicResource SimpleRepeatButton}"
                                      x:Name="IncreaseRepeat"
                                      Grid.Row="2"
                                      Command="ScrollBar.LineDownCommand">
                            <Grid>
                                <Path x:Name="IncreaseArrow"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!--
                        This uses a single template for ScrollBar and rotate it to be Horizontal
                        It also changes the commands so that the it does Left and Right instead of Up and Down Commands
                    -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Simple ScrollViewer
        ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar
        It is used by ListBox, MenuItem, ComboBox, and TreeView
    -->
    <Style x:Key="SimpleScrollViewer"
           BasedOn="{StaticResource {x:Type ScrollViewer}}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Row="0"
                                                Grid.Column="0"
                                                Margin="{TemplateBinding Padding}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}" />

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Style="{DynamicResource SimpleScrollBar}"
                                   x:Name="PART_HorizontalScrollBar"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar Style="{DynamicResource SimpleScrollBar}"
                                   x:Name="PART_VerticalScrollBar"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Orientation="Vertical"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This is the area which contains the selected item in the ComboBox -->

    <ControlTemplate x:Key="ComboBoxTextBox"
                     TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border x:Name="PART_ContentHost"
                Background="{TemplateBinding Background}"
                Focusable="False" />
    </ControlTemplate>

    <ControlTemplate x:Key="Snoop.Templates.NoSelectionComboBox"
                     TargetType="{x:Type controls:NoSelectionComboBox}">
        <Grid x:Name="Grid">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <ToggleButton x:Name="ToggleButton"
                              ClickMode="Press"
                              Focusable="False"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <ToggleButton.Content>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{TemplateBinding Header}" />
                            <Image Width="8"
                                   Height="6"
                                   Margin="3 0 0 0"
                                   Source="{DynamicResource downDrawingImage}" />
                        </StackPanel>
                    </ToggleButton.Content>
                </ToggleButton>
            </Border>

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent, AncestorType={x:Null}}}"
                   Placement="Bottom"
                   PopupAnimation="Slide">
                <Grid x:Name="DropDown"
                      MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="DropDownBorder"
                            Background="{DynamicResource Snoop.Brushes.Default.Background}"
                            BorderBrush="{DynamicResource Snoop.Brushes.Window.Frame}"
                            BorderThickness="1 1 1 1" />
                    <Grid Margin="1 1 1 1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Button Grid.Row="0"
                                Command="{TemplateBinding ResetSettingsCommand}">
                            <TextBlock>
                                Reset to default settings
                            </TextBlock>
                            <Button.ToolTip>
                                <TextBlock Text="{TemplateBinding ResetSettingsToolTip}" />
                            </Button.ToolTip>
                        </Button>

                        <ScrollViewer x:Name="ScrollViewer"
                                      Grid.Row="1"
                                      Margin="0 2 0 0">
                            <ItemsControl x:Name="PART_ItemsControl"
                                          ItemsPanel="{TemplateBinding ItemsPanel}"
                                          ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                          KeyboardNavigation.DirectionalNavigation="Contained">
                                <!--<ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>-->
                            </ItemsControl>
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Snoop.Brushes.Default.HighlightForeground}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                <Setter TargetName="DropDown" Property="Margin" Value="0 0 3 3" />
                <Setter TargetName="DropDown" Property="SnapsToDevicePixels" Value="True" />
                <Setter TargetName="DropDownBorder" Property="BitmapEffect">
                    <Setter.Value>
                        <DropShadowBitmapEffect ShadowDepth="1.5"
                                                Softness="0.15" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Snoop.Brushes.Default.Control}" />
                <Setter Property="Foreground" Value="{DynamicResource Snoop.Brushes.Default.GrayForeground}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="150" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type controls:NoSelectionComboBox}"
           BasedOn="{StaticResource {x:Type ComboBox}}"
           TargetType="{x:Type controls:NoSelectionComboBox}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource Snoop.Templates.NoSelectionComboBox}" />
    </Style>

    <Style x:Key="{x:Type controls:NoFocusHyperlink}"
           BasedOn="{StaticResource {x:Type Hyperlink}}"
           TargetType="{x:Type controls:NoFocusHyperlink}" />
</ResourceDictionary>